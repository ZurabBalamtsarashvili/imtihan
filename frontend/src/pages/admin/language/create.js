import AppLayout from '@/components/Layouts/AppLayout';
import Head from 'next/head';
import BackButton from '@/components/BackButton';
import Input from '@/components/Input';
import Button from '@/components/Button';
import { useDispatch } from '@/store';
import { useRouter } from 'next/router';
import toast from 'react-hot-toast';
import * as Yup from 'yup';
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import { useEffect } from 'react';
import Label from '@/components/Label';
import Toggle from "@/components/Toggle";
import {postLanguage} from "@/store/slices/language";

Create.getLayout = page => <AppLayout name="Create">{page}</AppLayout>;

const LanguageCreateSchema = Yup.object().shape({
    name: Yup.string().required('Required'),
    code: Yup.string().required('Required'),
    is_active: Yup.boolean(),
});

export default function Create() {
    const router = useRouter();

    const {
        handleSubmit,
        register,
        formState: { errors },
    } = useForm({ resolver: yupResolver(LanguageCreateSchema) });

    const dispatch = useDispatch();

    const onSubmit = data => {
        dispatch(postLanguage(data))
            .then(() => {
                toast.success('Created successfully!');
                router.push('/admin/language');
            })
            .catch(err => {
                toast.error(err?.response?.data?.message);
                console.log('err');
            });
    };

    return (
        <>
            <Head>
                <title>Create - Ä°mtihan</title>
                <meta name="description" content="Generated by codenteq" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="px-4 pt-16">
                <BackButton href="/admin/language" />

                <form onSubmit={handleSubmit(onSubmit)}>
                    <div className="flex items-center justify-between my-4">
                        <div className="mt-3">
                            <label className="inline-flex items-center">
                                <Toggle
                                    type="checkbox"
                                    {...register('is_active')}
                                    defaultValue={1} />

                                <span className="ml-2 text-sm text-zinc-600">
                                    Checked for active
                                </span>
                            </label>
                        </div>
                        <Button type="submit">Save</Button>
                    </div>

                    <div className="grid gap-4 mb-6 lg:grid-cols-2">
                        <div>
                            <Label>Name</Label>

                            <Input
                                {...register('name')}
                                type="text"
                                className="block mt-1 w-full"
                            />
                            {errors.name?.message && (
                                <p className="mt-2 text-sm text-red-600 dark:text-red-500">
                                    {errors.name.message}
                                </p>
                            )}
                        </div>
                        <div>
                            <Label>Code</Label>

                            <Input
                                {...register('code')}
                                type="text"
                                className="block mt-1 w-full"
                            />
                            {errors.code?.message && (
                                <p className="mt-2 text-sm text-red-600 dark:text-red-500">
                                    {errors.code.message}
                                </p>
                            )}
                        </div>
                    </div>
                </form>
            </main>
        </>
    );
}
